class Node
    data: integer (or any data type)
    next: point to Node

    constructor(int x)
        data = x
        next = null pointer
    end constructor

end class

class Stack
    top: point to Node
    var size
    
    // time complexity O(1) || space complexity O(1)
    constructor Stack()
        size = 0
        top = null pointer
    end constructor

    // time complexity O(1) || space complexity O(1)
    function isEmpty() -> BOOLEAN
        return top == null pointer
    end function
    
    // time complexity O(1) || space complexity O(1)
    function Push(int x)
        if (isEmpty()) then
            top = new Node(x)
        else
            temp: point to Node
            temp = new Node(x)
            temp.next = top
            top = temp
        end if
    end function

    // time complexity O(1) || space complexity O(1)
    function Pop()
        if (isFull) then
            return
        end if

        temp: point to Node
        temp = top
        top = top.next
        free temp
        size = size - 1
    end function

    // time complexity O(1) || space complexity O(1)
    function getTop()
        return top.data
    end function

    // time complexity O(n) || space complexity O(1)
    function print()
        temp: point to Node
        temp = top

        while (temp != null pointer)
            print(temp.data)
            print(" ")
            temp = temp.next
        end while
    end function
    
end class