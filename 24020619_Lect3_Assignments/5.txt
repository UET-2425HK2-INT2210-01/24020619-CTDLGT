class Stack
    var arr[]
    var top
    var size
    // time complexity O(1) || space complexity O(n)
    function initializeStack(Size)
        stack = array of size Size
        top = -1
    end function

    // time complexity O(1) || space complexity O(1)
    function isEmpty(stack) -> BOOLEAN
        return top == -1
    end function

    // time complexity O(1) || space complexity O(1)
    function isFull(stack) -> BOOLEAN
        return top == Size - 1
    end function

    // time complexity O(1) || space complexity O(1)
    function Push(x)
        if isFull(stack) == true
            return
        end if

        top = top + 1
        stack[top] = x
    end function

    // time complexity O(1) || space complexity O(1)
    function Pop()
        if isEmpty(stack) == true
            return 
        end if

        top = top - 1
    end function

    // time complexity O(1) || space complexity O(1)
    function getTop()
        return stack[top]
    end function

    // time complexity O(n) || space complexity O(1)
    function print()
        for i = top to 0
            print(stack[i])
            print('\n')
        end for
    end function

end class